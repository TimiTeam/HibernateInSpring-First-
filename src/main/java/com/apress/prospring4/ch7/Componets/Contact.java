package com.apress.prospring4.ch7.componets;


import javax.persistence.*;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;


@Entity
//This annotation reports that this class is displayed essential class
@Table(name = "contact")
//This annotation specifies the name of the table in the database to which this entity is displayed
@NamedQueries({
        @NamedQuery(name="Contact.findAllWithDetail",
                query = "select distinct c from Contact c left join fetch c.contactTelDetails t " +
                        "left join fetch c.hobbies h"),
        @NamedQuery(name = "Contact.findById",
        query = "select distinct c from Contact c left join fetch c.contactTelDetails t " +
                "left  join  fetch c.hobbies h where c.id  = :id")
                })
public class Contact implements Serializable{
    private Long id;
    private int version;
    private String firstName;
    private String lastName;
    private Date birthDate;
    private Set<ContactTelDetail> contactTelDetails = new HashSet<ContactTelDetail>();
    private Set<Hobby> hobbies = new HashSet<Hobby>();

    public Contact() {
    }

    public Contact(String firstName, String lastName, String data) {
        this.firstName = firstName;
        this.lastName = lastName;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        if(data == null){
            this.birthDate = new Date(Calendar.getInstance().getTimeInMillis());
        }
        try {
            this.birthDate = simpleDateFormat.parse(data);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
//    The IDENTITY strategy indicates that the identifier was generated by the RDBMS at the time of insertion.
    @Column(name = "id")
//    @Column annotation is point to column name :)
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Version
//    Each time a Hibernate infrastructure updates an entry,
// it compares the version of the entity instance with the version of the record in the database.
    @Column(name = "version")
    public int getVersion() {
        return version;
    }

    public void setVersion(int version) {
        this.version = version;
    }

    @Column(name = "first_name")
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "last_name")
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Temporal(TemporalType.DATE)
//    This will allow you to access the birthDate attribute in the Contact object
// using the java type.util.Date,
    @Column(name = "birth_date")
    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    @OneToMany(mappedBy = "contact", cascade = CascadeType.ALL,
            orphanRemoval = true)
//    This annotation indicates a relationships 'One to Many' with a class ContactTelDetail.
//    'cascade' means that the update operation should extend to child records.
//    'orphanRemoval' indicates that after the details of the contact's phone numbers are updated,
// entries that no longer exist in the set must be removed from the database.
    public Set<ContactTelDetail> getContactTelDetails() {
        return this.contactTelDetails;
    }

    public void setContactTelDetails(Set<ContactTelDetail> contactTelDetails) {
        this.contactTelDetails = contactTelDetails;
    }

    @ManyToMany
    @JoinTable(name = "contact_hobby_detail",
            joinColumns = @JoinColumn(name = "contact_id"),
            inverseJoinColumns = @JoinColumn(name = "hobby_id"))
//    @JoinTable indicates the connection table that the Hibernate should look at.
//    The 'joinColumns' defines a column that is a foreign key in the table 'contact'.
//    The 'inverseJoinColumns' specifies a column that represents the foreign key
// on the other side of the association, 'hobby'
    public Set<Hobby> getHobbies() {
        return hobbies;
    }


    public void setHobbies(Set<Hobby> hobbies) {
        this.hobbies = hobbies;
    }

    public void addContactTelDetail(ContactTelDetail contactTelDetail){
        contactTelDetail.setContact(this);
        getContactTelDetails().add(contactTelDetail);
    }

    public void removeContactTelDetail(ContactTelDetail contactTelDetail){
        getContactTelDetails().remove(contactTelDetail);
    }

    @Override
    public String toString() {
        return "Contact with " +
                "Id: " + id +
                ", version - " + version +
                ", firstName - " + firstName +
                ", lastName - " + lastName +
                ", birthDate - " + birthDate;
    }
}
